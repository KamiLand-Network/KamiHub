# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master", "release/*", "dev" ]
  pull_request:
    branches: [ "master", "release/*" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle Wrapper
        run: ./gradlew build --no-daemon --stacktrace

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: KamiHub-dev-${{ github.run_number }}
          path: build/libs/*.jar

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Extract version from branch name
        id: vars
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/release/}"
          VERSION="${BRANCH_NAME}"
          IS_PRERELEASE="false"
          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE="true"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag -a "${{ steps.vars.outputs.version }}" -m "Release ${{ steps.vars.outputs.version }}"
          git push origin "${{ steps.vars.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          name: Release ${{ steps.vars.outputs.version }}
          draft: false
          prerelease: ${{ steps.vars.outputs.is_prerelease }}
          assets: build/libs/KamiHub-${{ steps.vars.outputs.version }}.jar
